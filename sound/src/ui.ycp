/**
 *
 * File:
 *   ui.ycp
 *
 * Module:
 *   Sound
 *
 * Summary:
 *   user interface functions for sound module
 *
 * Authors:
 *   Dan Vesel√Ω <dan@suse.cz>
 *   Dan Meszaros <dmeszar@suse.cz>
 *
 */

{
    textdomain "sound";
    import "Sound";
    import "Joystick";
    import "Wizard";
    import "Popup";
    import "Label";

    /**
     *  dialog to be displayed when user presses 'Abort' button
     *	@return boolean yes/no
     */
    define boolean ReallyAbort() ``{
	boolean config_changed = Sound::Changed() || Joystick::Changed();
	y2milestone("Sound or joystick config changed: %1", config_changed);

	// no change, abort immediately
	if (!config_changed)
	{
	    return true;
	}

	return Popup::ReallyAbort(config_changed);
    }

    /**
     * quick config dialog widget
     * @param name card model
     * @param cname alias for modules conf
     * @param cpos position of the card
     * @return term with widget
     */
    define term AutoconfDlg (string name, string cname, integer cpos) {
	string clab = "";
	if (cpos < 3)
	{
	    clab = "\n" + sformat (Sound::STRINGS["soundCount", cpos]:"",cname);
	}
	else
	{
	    clab = "\n" + sformat(Sound::STRINGS["soundCount", 3]:"", cname,
		cpos + 1);
	}

	term con = `VBox (
	    `VSpacing (1),
	    // this is the first part of message "The sound card 'cardname'
	    // will be configured as the first snd card"
	    `Label (`opt (`hstretch), _("The sound card\n")),
	    `HBox (`HSpacing (5), `Label (`opt (`hstretch), name)),
	    `Label (`opt (`hstretch), clab),
            `VSpacing (1),
	    `HBox (`HSpacing (5),
	      `RadioButtonGroup (`id (`action), `VBox (
		`RadioButton (`id (`quick), `opt (`hstretch, `notify),
		    // radio button label - type of setup
		    _("&Quick automatic setup"), true),
                `VSpacing (0.3),
                `RadioButton (`id (`normal), `opt (`hstretch, `notify),
		    // radio button label - type of setup
		    _("Normal &setup")),
                `VSpacing (0.3),
                `RadioButton (`id (`options), `opt (`hstretch, `notify),
		    // radio button label - type of setup
		    _("Advanced setup with possibility to change &options"))
              ))
	     ),
	    `VStretch ()
        );
	return con;
    }

    /**
     *  DisplayName
     *
     * @param name card model
     * @param cname sound card alias for modules conf
     * @param cpos cards position
     * @param flags enable/disable radiobuttons accordingly
     * @return map symbol of next dialog
     */
    define map DisplayName (string name, string cname, integer cpos, integer flags) {

	string helptext	= Sound::STRINGS["DisplayName"]:"";
	term con	= AutoconfDlg (name, cname, cpos);
	// dialog header
	Wizard::SetContents (_("Sound Card Configuration"), con,
	    helptext, true, true);

	// dialog title
	integer flagc	= 1;
	integer flagp	= 0;
	boolean selected = false;
	list flages	= [`quick, `normal, `intro];

	while (flagp < 3)
	{
	    if ((flagc & flags) == 0)
	    {
		UI::ChangeWidget(`id(flages[flagp]:`quick), `Enabled, false);
	    }
	    else
	    {
		if (!selected)
		{
		    selected = true;
		    UI::ChangeWidget(`id(`action), `CurrentButton,
			flages[flagp]:`quick);
		}
	    }
	    flagp = flagp + 1;
	    flagc = flagc * 2;
	}

	Wizard::RestoreNextButton();

	symbol input = `quick;

	do {
	    if (input == `cancel || input == `abort)
	    {
		if (ReallyAbort())
		{
		    return $["ui" : `abort];
		}
	    }
	    input = (symbol) UI::UserInput();

	} while (input != `next && input !=`back);

	symbol output = input;
	if (input == `next)
	{
	    output = (symbol) UI::QueryWidget(`id(`action), `CurrentButton);
	    if (output == `normal)
	    {
		output = `next;
	    }
	}
	return $["ui" : output];
    }

}//EOF
