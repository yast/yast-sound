# module: y2c_snd
# description: sound config design & strategy
# author: dan meszaros <dmeszar@suse.cz>
#

1 sound card config quick overview
==================================

1.1 determining the kernel module needed by sound card
======================================================

1.1.1 easy one: pci/isa pnp cards
=================================

Read(.probe.sound) (libhd) gives us device/vendor id. we look to the sound card db
that will tell us the module name (if card is supported) or will tell us nothing
(if card is not supported). we ignore such cards.

1.1.2 non pnp isa/dummy card
============================

we must ask user for the kernel module

1.2 inserting module into kernel
================================

now we know the module name, database gives us the default option parameters
we add some parameters and then just launch 'modprobe ... ..'. (with having stopped 
the sound system before using '/usr/sbin/rcalsasound stop').

1.3 intialize the card
======================

sound card awakes with all channels muted. we must umnute some channels (Master, PCM,
Synth etc) and set volume to some reasonable volume.

1.4 write the config
====================

config is writen to /etc/modules.conf, volume settings are saved
to /etc/asound.state using the 'alsactl store' shell command,
unique key is written to .probe.status and to /etc/modules.conf

1.5 example
===========

hwinfo gives us device_id=3058, vendor_id=1106. database 
('indices' part of database) says 'snd-via686' should be used.
then we'll look again to the database to get the options that 
have default options. db says: 

snd_ac97_clock=48000

we'll add parameter 'snd_enable=1' and 'snd_index=0' and launch

    modprobe snd snd_cards_limit=1
    modprobe snd-via686 snd_ac97_clock=48000 snd_enable=1 snd_index=0

then we'll unmute some channels

    SCR::Write(.audio.alsa.cards.0.channels.Master.mute, false); // true == muted
    SCR::Write(.audio.alsa.cards.0.channels.PCM.mute, false);

and set the volume

    SCR::Write(.audio.alsa.cards.0.channels.Master.volume, 80);
    SCR::Write(.audio.alsa.cards.0.channels.PCM.volume, 80);

and can play test sound

    aplay -D hw:card0 /usr/share/sounds/alsa/test.wav

if the modprobe was successfull, now we can write config to /etc/modules.conf:

    # Alsa sound support. 
    # Warning: please don't modify comments over aliases 'snd-card-#'
    alias char-major-116 snd
    options snd snd_cards_limit=1 snd_major=116

    # hB6S.CxYdteFTb8D:AC97 Audio Controller
    alias snd-card-0 snd-via686

    options snd-via686 snd_ac97_clock=48000 snd_enable=1 snd_index=0

    # YaST2: sound system dependent part
    #
    alias sound-slot-0 snd-card-0
    alias sound-service-0-0 snd-mixer-oss
    alias sound-service-0-1 snd-seq-oss
    alias sound-service-0-3 snd-pcm-oss
    alias sound-service-0-8 snd-seq-oss
    alias sound-service-0-11 snd-mixer-oss
    alias sound-service-0-12 snd-pcm-oss

the tail 7 aliases are for oss compatibility.
    

2 more sound cards
==================

is little more tricky. if each card uses different module, we'll just add
'alias sound-card-1 snd-blabla' 'options snd-blabla' and set the 'snd_cards_limit'
to card number. and then generate oss aliases for each card separatelly.

when there are more card using the same module, we create 'alias snd-card-1' again
but we must pass options to kernel module as a coma-separated list.

say we have 2 soundblaster live. and 1 via686. we need to have sb as the 1st and 3rc card,
via686 will be 2nd:

    alias char-major-116 snd
    options snd snd_cards_limit=3 snd_major=116

    alias snd-card-0 snd-emu10k1
    alias snd-card-1 snd-via686
    alias snd-card-2 snd-emu10k1 

    options snd-emu10k1 snd_enable=1,1 snd_index=0,2 snd_seq_ports=,16

note that when passing option to only one of two cards, the second value is empty string
(thus snd_seq_ports=,16 value 16 is passed to second card, first one is unset)
